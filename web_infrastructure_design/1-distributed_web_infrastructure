## ðŸ”¹ Whiteboard
```
                        Internet
                           |
                DNS: www.foobar.com -> 8.8.8.8
                           |
                       +--------+
                       |  HAProxy  |   <-- public IP 8.8.8.8
                       | (TLS term; | 
                       |  LB: leastconn)
                       +--------+
                           |
              -------------------------------
              |              |              |
         +---------+     +---------+     +---------+
         | Server-1|     | Server-2|     | Server-3|
         | (app)   |     | (app)   |     | (db) or |
         |         |     |         |     | (app)   |
         +---------+     +---------+     +---------+
         | - Firewall|   | - Firewall|   | - Firewall|
         | - Nginx   |   | - Nginx   |   | - Nginx   |
         | - App srv |   | - App srv |   | - App srv |
         | - /app/   |   | - /app/   |   | - /app/   |
         | - MySQL   |   | - MySQL   |   | - MySQL   |
         | - Monitor |   | - Monitor |   | - Monitor |
         +---------+     +---------+     +---------+
```

Internet â†’ DNS â†’ HAProxy (Load Balancer) â†’ Multiple Servers (App + DB)

yaml
Copier le code

- **DNS** â†’ maps `www.foobar.com` to the public IP of the load balancer.  
- **HAProxy** â†’ distributes traffic between servers, checks health, and can handle TLS.  
- **Servers** â†’ run Nginx (web server), application code, and MySQL database.  
- **MySQL** â†’ one server acts as primary (writes), the other(s) as replicas (reads).  

---

## User Flow

1. User types `www.foobar.com` in their browser.  
2. DNS resolves the domain to the load balancerâ€™s IP.  
3. HAProxy forwards the request to one of the backend servers.  
4. The server handles the request with:  
   - **Nginx** â†’ serves static files and forwards dynamic requests.  
   - **App server** â†’ runs the business logic.  
   - **MySQL** â†’ provides data (reads from replica, writes to primary).  
5. The response flows back to the userâ€™s browser.  

---

## Key Design Choices

- **Load Balancer** â†’ ensures traffic is shared, avoids overloading a single server.  
- **Active-Active servers** â†’ multiple servers can serve requests at the same time.  
- **MySQL replication** â†’ one primary for writes, one or more replicas for reads and failover.  
- **Health checks** â†’ HAProxy automatically removes unhealthy servers.  

---

## Benefits

- Handles more traffic (scalability).  
- Survives a server failure (better reliability).  
- Allows maintenance without full downtime.  

---

## Weaknesses

- **Single HAProxy** = still a single point of failure.  
- **Primary DB** = single writer; if it fails, writes stop until manual failover.  
- **No TLS / security by default**.  
- **No monitoring** = issues may go unnoticed.  

---

In short: this design is **much better than a single server**, but still needs redundancy for the load balancer, automated DB failover, proper security, and monitoring to be production-ready.
